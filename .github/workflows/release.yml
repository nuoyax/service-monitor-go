name: Build and Release

# 仅在 push tag 时触发
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build All Platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, rhel-8] # 这里 rhel-8 用 self-host 或替换
        goos: [windows, linux, linux]
        goarch: [amd64, amd64, amd64]

    steps:
      # 1. 拉取仓库
      - uses: actions/checkout@v3

      # 2. 设置 Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      # 3. 缓存 Go modules
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 4. 编译可执行文件
      - name: Build EXE/Binary
        run: |
          echo "Current tag: ${{ github.ref_name }}"
          BIN_NAME="service-monitor-${{ github.ref_name }}-${{ matrix.goos }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            BIN_NAME="${BIN_NAME}.exe"
          fi
          mkdir -p ./bin
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ./bin/$BIN_NAME ./cmd/main.go
        shell: bash

      # 5. 创建 Release 并上传
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./bin/service-monitor-${{ github.ref_name }}-${{ matrix.goos }}*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
